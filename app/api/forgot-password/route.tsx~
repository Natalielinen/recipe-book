import { prisma } from "@/prisma/prisma-client";
import crypto from "crypto";
import { NextRequest, NextResponse } from "next/server";
import nodemailer from 'nodemailer';

export async function POST(req: NextRequest) {
    const { email } = await req.json();

    console.log('req', req);

    const user = await prisma.user.findUnique({
        where: { email },
    });

    if (!user) {
        return NextResponse.json({ error: "User not found" }, { status: 404 });
    }

    const resetToken = crypto.randomBytes(20).toString("hex");
    const passwordResetToken = crypto
        .createHash("sha256")
        .update(resetToken)
        .digest("hex");

    const passwordResetExpires = Date.now() + 360000;

    await prisma.passwordReset.create({
        data: {
            userId: user.id,
            token: passwordResetToken,
            expiresAt: new Date(passwordResetExpires),
        },
    });

    const resetUrl = `https://recipe-book-teal-five.vercel.app/reset-password/${passwordResetToken}`;
    // const resetUrl = `localhost:3000/reset-password/${resetToken}`;

    const transporter = nodemailer.createTransport({
        host: "smtp.yandex.com",
        port: 465,
        secure: true,
        auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS,
        },
    });


    console.log('user', process.env.EMAIL_USER)
    console.log('pass', process.env.EMAIL_PASS)
    const resetLink = resetUrl;

    const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: 'Восстановление пароля',
        text: `Перейдите по ссылке для восстановления пароля: ${resetLink}`,
    };

    try {
        await transporter.sendMail(mailOptions);
    } catch (error) {
        console.error(error);
        return NextResponse.json({ error: "Failed to send email" }, { status: 500 });
    }

    return NextResponse.json({ success: true }, { status: 200 });

}
