generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String @unique
    password String
    vip      Boolean  @default(false)
    recipes  Recipe[]

    verificationCode VerificationCode?
    verified DateTime

    provider   String?
    providerId String?

    passwordResets PasswordReset[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id Int @id @default(autoincrement())

    nameKey String @unique

    recipes Recipe[] 

}

model Recipe {
    id Int @id @default(autoincrement())

    recipeName       String
    imageUrl         String
    shortDescription String
    fullDescription  String
    servings         Int

    category         Category @relation(fields: [categoryId], references: [id])
    categoryId       Int

    user             User @relation(fields: [userId], references: [id])
    userId           Int

    ingredients      Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Ingredient {
    id Int @id @default(autoincrement())

    name   String
    unit   String
    amount Int
    price  Int @default(0)

    recipe   Recipe @relation(fields: [recipeId], references: [id])
    recipeId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id])
    userId Int @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])

}

model Story {
    id              Int    @id @default(autoincrement())
    previewImageUrl String

    items StoryItem[]

    createdAt DateTime @default(now())
}

model StoryItem {
    id Int @id @default(autoincrement())

    storyId Int
    story   Story @relation(fields: [storyId], references: [id])

    sourceUrl String

}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}